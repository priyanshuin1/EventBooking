{"remainingRequest":"/Users/priyanshu/Desktop/EventBooking/Angular 6/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--8-1!/Users/priyanshu/Desktop/EventBooking/Angular 6/node_modules/ngx-uploader/fesm5/ngx-uploader.js","dependencies":[{"path":"/Users/priyanshu/Desktop/EventBooking/Angular 6/node_modules/ngx-uploader/fesm5/ngx-uploader.js","mtime":499162500000},{"path":"/Users/priyanshu/Desktop/EventBooking/Angular 6/node_modules/cache-loader/dist/cjs.js","mtime":1560613398093},{"path":"/Users/priyanshu/Desktop/EventBooking/Angular 6/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1528256844000}],"contextDependencies":[],"result":["/** PURE_IMPORTS_START tslib,rxjs,rxjs_operators,_angular_core PURE_IMPORTS_END */\nimport { __spread } from 'tslib';\nimport { Observable, Subject } from 'rxjs';\nimport { mergeMap, finalize } from 'rxjs/operators';\nimport { EventEmitter, Directive, ElementRef, Input, Output, HostListener, NgModule } from '@angular/core';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/** @enum {number} */\nvar UploadStatus = /*@__PURE__*/ (function () {\n    var UploadStatus = {\n        Queue: 0,\n        Uploading: 1,\n        Done: 2,\n        Cancelled: 3,\n    };\n    UploadStatus[UploadStatus.Queue] = 'Queue';\n    UploadStatus[UploadStatus.Uploading] = 'Uploading';\n    UploadStatus[UploadStatus.Done] = 'Done';\n    UploadStatus[UploadStatus.Cancelled] = 'Cancelled';\n    return UploadStatus;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @param {?} bytes\n * @return {?}\n */\nfunction humanizeBytes(bytes) {\n    if (bytes === 0) {\n        return '0 Byte';\n    }\n    /** @type {?} */\n    var k = 1024;\n    /** @type {?} */\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB'];\n    /** @type {?} */\n    var i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\n}\nvar NgUploaderService = /** @class */ /*@__PURE__*/ (function () {\n    function NgUploaderService(concurrency, contentTypes, maxUploads) {\n        if (concurrency === void 0) {\n            concurrency = Number.POSITIVE_INFINITY;\n        }\n        if (contentTypes === void 0) {\n            contentTypes = ['*'];\n        }\n        if (maxUploads === void 0) {\n            maxUploads = Number.POSITIVE_INFINITY;\n        }\n        var _this = this;\n        this.queue = [];\n        this.serviceEvents = new EventEmitter();\n        this.uploadScheduler = new Subject();\n        this.subs = [];\n        this.contentTypes = contentTypes;\n        this.maxUploads = maxUploads;\n        this.uploadScheduler\n            .pipe(mergeMap(function (upload) { return _this.startUpload(upload); }, concurrency))\n            .subscribe(function (uploadOutput) { return _this.serviceEvents.emit(uploadOutput); });\n    }\n    /**\n     * @param {?} incomingFiles\n     * @return {?}\n     */\n    NgUploaderService.prototype.handleFiles = /**\n     * @param {?} incomingFiles\n     * @return {?}\n     */\n        function (incomingFiles) {\n            var _this = this;\n            var _a;\n            /** @type {?} */\n            var allowedIncomingFiles = [].reduce.call(incomingFiles, function (acc, checkFile, i) {\n                /** @type {?} */\n                var futureQueueLength = acc.length + _this.queue.length + 1;\n                if (_this.isContentTypeAllowed(checkFile.type) && futureQueueLength <= _this.maxUploads) {\n                    acc = acc.concat(checkFile);\n                }\n                else {\n                    /** @type {?} */\n                    var rejectedFile = _this.makeUploadFile(checkFile, i);\n                    _this.serviceEvents.emit({ type: 'rejected', file: rejectedFile });\n                }\n                return acc;\n            }, []);\n            (_a = this.queue).push.apply(_a, __spread([].map.call(allowedIncomingFiles, function (file, i) {\n                /** @type {?} */\n                var uploadFile = _this.makeUploadFile(file, i);\n                _this.serviceEvents.emit({ type: 'addedToQueue', file: uploadFile });\n                return uploadFile;\n            })));\n            this.serviceEvents.emit({ type: 'allAddedToQueue' });\n        };\n    /**\n     * @param {?} input\n     * @return {?}\n     */\n    NgUploaderService.prototype.initInputEvents = /**\n     * @param {?} input\n     * @return {?}\n     */\n        function (input) {\n            var _this = this;\n            return input.subscribe(function (event) {\n                switch (event.type) {\n                    case 'uploadFile':\n                        /** @type {?} */\n                        var uploadFileIndex = _this.queue.findIndex(function (file) { return file === event.file; });\n                        if (uploadFileIndex !== -1 && event.file) {\n                            _this.uploadScheduler.next({ file: _this.queue[uploadFileIndex], event: event });\n                        }\n                        break;\n                    case 'uploadAll':\n                        /** @type {?} */\n                        var files = _this.queue.filter(function (file) { return file.progress.status === UploadStatus.Queue; });\n                        files.forEach(function (file) { return _this.uploadScheduler.next({ file: file, event: event }); });\n                        break;\n                    case 'cancel':\n                        /** @type {?} */\n                        var id_1 = event.id || null;\n                        if (!id_1) {\n                            return;\n                        }\n                        /** @type {?} */\n                        var subs = _this.subs.filter(function (sub) { return sub.id === id_1; });\n                        subs.forEach(function (sub) {\n                            if (sub.sub) {\n                                sub.sub.unsubscribe();\n                                /** @type {?} */\n                                var fileIndex = _this.queue.findIndex(function (file) { return file.id === id_1; });\n                                if (fileIndex !== -1) {\n                                    _this.queue[fileIndex].progress.status = UploadStatus.Cancelled;\n                                    _this.serviceEvents.emit({ type: 'cancelled', file: _this.queue[fileIndex] });\n                                }\n                            }\n                        });\n                        break;\n                    case 'cancelAll':\n                        _this.subs.forEach(function (sub) {\n                            if (sub.sub) {\n                                sub.sub.unsubscribe();\n                            }\n                            /** @type {?} */\n                            var file = _this.queue.find(function (uploadFile) { return uploadFile.id === sub.id; });\n                            if (file) {\n                                file.progress.status = UploadStatus.Cancelled;\n                                _this.serviceEvents.emit({ type: 'cancelled', file: file });\n                            }\n                        });\n                        break;\n                    case 'remove':\n                        if (!event.id) {\n                            return;\n                        }\n                        /** @type {?} */\n                        var i = _this.queue.findIndex(function (file) { return file.id === event.id; });\n                        if (i !== -1) {\n                            /** @type {?} */\n                            var file = _this.queue[i];\n                            _this.queue.splice(i, 1);\n                            _this.serviceEvents.emit({ type: 'removed', file: file });\n                        }\n                        break;\n                    case 'removeAll':\n                        if (_this.queue.length) {\n                            _this.queue = [];\n                            _this.serviceEvents.emit({ type: 'removedAll' });\n                        }\n                        break;\n                }\n            });\n        };\n    /**\n     * @param {?} upload\n     * @return {?}\n     */\n    NgUploaderService.prototype.startUpload = /**\n     * @param {?} upload\n     * @return {?}\n     */\n        function (upload) {\n            var _this = this;\n            return new Observable(function (observer) {\n                /** @type {?} */\n                var sub = _this.uploadFile(upload.file, upload.event)\n                    .pipe(finalize(function () {\n                    if (!observer.closed) {\n                        observer.complete();\n                    }\n                }))\n                    .subscribe(function (output) {\n                    observer.next(output);\n                }, function (err) {\n                    observer.error(err);\n                    observer.complete();\n                }, function () {\n                    observer.complete();\n                });\n                _this.subs.push({ id: upload.file.id, sub: sub });\n            });\n        };\n    /**\n     * @param {?} file\n     * @param {?} event\n     * @return {?}\n     */\n    NgUploaderService.prototype.uploadFile = /**\n     * @param {?} file\n     * @param {?} event\n     * @return {?}\n     */\n        function (file, event) {\n            var _this = this;\n            return new Observable(function (observer) {\n                /** @type {?} */\n                var url = event.url || '';\n                /** @type {?} */\n                var method = event.method || 'POST';\n                /** @type {?} */\n                var data = event.data || {};\n                /** @type {?} */\n                var headers = event.headers || {};\n                /** @type {?} */\n                var xhr = new XMLHttpRequest();\n                /** @type {?} */\n                var time = new Date().getTime();\n                /** @type {?} */\n                var progressStartTime = (file.progress.data && file.progress.data.startTime) || time;\n                /** @type {?} */\n                var speed = 0;\n                /** @type {?} */\n                var eta = null;\n                xhr.upload.addEventListener('progress', function (e) {\n                    if (e.lengthComputable) {\n                        /** @type {?} */\n                        var percentage = Math.round((e.loaded * 100) / e.total);\n                        /** @type {?} */\n                        var diff = new Date().getTime() - time;\n                        speed = Math.round(e.loaded / diff * 1000);\n                        progressStartTime = (file.progress.data && file.progress.data.startTime) || new Date().getTime();\n                        eta = Math.ceil((e.total - e.loaded) / speed);\n                        file.progress = {\n                            status: UploadStatus.Uploading,\n                            data: {\n                                percentage: percentage,\n                                speed: speed,\n                                speedHuman: humanizeBytes(speed) + \"/s\",\n                                startTime: progressStartTime,\n                                endTime: null,\n                                eta: eta,\n                                etaHuman: _this.secondsToHuman(eta)\n                            }\n                        };\n                        observer.next({ type: 'uploading', file: file });\n                    }\n                }, false);\n                xhr.upload.addEventListener('error', function (e) {\n                    observer.error(e);\n                    observer.complete();\n                });\n                xhr.onreadystatechange = function () {\n                    if (xhr.readyState === XMLHttpRequest.DONE) {\n                        /** @type {?} */\n                        var speedAverage = Math.round(file.size / (new Date().getTime() - progressStartTime) * 1000);\n                        file.progress = {\n                            status: UploadStatus.Done,\n                            data: {\n                                percentage: 100,\n                                speed: speedAverage,\n                                speedHuman: humanizeBytes(speedAverage) + \"/s\",\n                                startTime: progressStartTime,\n                                endTime: new Date().getTime(),\n                                eta: eta,\n                                etaHuman: _this.secondsToHuman(eta || 0)\n                            }\n                        };\n                        file.responseStatus = xhr.status;\n                        try {\n                            file.response = JSON.parse(xhr.response);\n                        }\n                        catch (e) {\n                            file.response = xhr.response;\n                        }\n                        file.responseHeaders = _this.parseResponseHeaders(xhr.getAllResponseHeaders());\n                        observer.next({ type: 'done', file: file });\n                        observer.complete();\n                    }\n                };\n                xhr.open(method, url, true);\n                xhr.withCredentials = event.withCredentials ? true : false;\n                try {\n                    /** @type {?} */\n                    var uploadFile_1 = ( /** @type {?} */(file.nativeFile));\n                    /** @type {?} */\n                    var uploadIndex = _this.queue.findIndex(function (outFile) { return outFile.nativeFile === uploadFile_1; });\n                    if (_this.queue[uploadIndex].progress.status === UploadStatus.Cancelled) {\n                        observer.complete();\n                    }\n                    Object.keys(headers).forEach(function (key) { return xhr.setRequestHeader(key, headers[key]); });\n                    /** @type {?} */\n                    var bodyToSend = void 0;\n                    if (event.includeWebKitFormBoundary !== false) {\n                        Object.keys(data).forEach(function (key) { return file.form.append(key, data[key]); });\n                        file.form.append(event.fieldName || 'file', uploadFile_1, uploadFile_1.name);\n                        bodyToSend = file.form;\n                    }\n                    else {\n                        bodyToSend = uploadFile_1;\n                    }\n                    _this.serviceEvents.emit({ type: 'start', file: file });\n                    xhr.send(bodyToSend);\n                }\n                catch (e) {\n                    observer.complete();\n                }\n                return function () {\n                    xhr.abort();\n                };\n            });\n        };\n    /**\n     * @param {?} sec\n     * @return {?}\n     */\n    NgUploaderService.prototype.secondsToHuman = /**\n     * @param {?} sec\n     * @return {?}\n     */\n        function (sec) {\n            return new Date(sec * 1000).toISOString().substr(11, 8);\n        };\n    /**\n     * @return {?}\n     */\n    NgUploaderService.prototype.generateId = /**\n     * @return {?}\n     */\n        function () {\n            return Math.random().toString(36).substring(7);\n        };\n    /**\n     * @param {?} contentTypes\n     * @return {?}\n     */\n    NgUploaderService.prototype.setContentTypes = /**\n     * @param {?} contentTypes\n     * @return {?}\n     */\n        function (contentTypes) {\n            if (typeof contentTypes !== 'undefined' && contentTypes instanceof Array) {\n                if (contentTypes.find(function (type) { return type === '*'; }) !== undefined) {\n                    this.contentTypes = ['*'];\n                }\n                else {\n                    this.contentTypes = contentTypes;\n                }\n                return;\n            }\n            this.contentTypes = ['*'];\n        };\n    /**\n     * @return {?}\n     */\n    NgUploaderService.prototype.allContentTypesAllowed = /**\n     * @return {?}\n     */\n        function () {\n            return this.contentTypes.find(function (type) { return type === '*'; }) !== undefined;\n        };\n    /**\n     * @param {?} mimetype\n     * @return {?}\n     */\n    NgUploaderService.prototype.isContentTypeAllowed = /**\n     * @param {?} mimetype\n     * @return {?}\n     */\n        function (mimetype) {\n            if (this.allContentTypesAllowed()) {\n                return true;\n            }\n            return this.contentTypes.find(function (type) { return type === mimetype; }) !== undefined;\n        };\n    /**\n     * @param {?} file\n     * @param {?} index\n     * @return {?}\n     */\n    NgUploaderService.prototype.makeUploadFile = /**\n     * @param {?} file\n     * @param {?} index\n     * @return {?}\n     */\n        function (file, index) {\n            return {\n                fileIndex: index,\n                id: this.generateId(),\n                name: file.name,\n                size: file.size,\n                type: file.type,\n                form: new FormData(),\n                progress: {\n                    status: UploadStatus.Queue,\n                    data: {\n                        percentage: 0,\n                        speed: 0,\n                        speedHuman: humanizeBytes(0) + \"/s\",\n                        startTime: null,\n                        endTime: null,\n                        eta: null,\n                        etaHuman: null\n                    }\n                },\n                lastModifiedDate: new Date(file.lastModified),\n                sub: undefined,\n                nativeFile: file\n            };\n        };\n    /**\n     * @private\n     * @param {?} httpHeaders\n     * @return {?}\n     */\n    NgUploaderService.prototype.parseResponseHeaders = /**\n     * @private\n     * @param {?} httpHeaders\n     * @return {?}\n     */\n        function (httpHeaders) {\n            if (!httpHeaders) {\n                return;\n            }\n            return httpHeaders.split('\\n')\n                .map(function (x) { return x.split(/: */, 2); })\n                .filter(function (x) { return x[0]; })\n                .reduce(function (acc, x) {\n                acc[x[0]] = x[1];\n                return acc;\n            }, {});\n        };\n    return NgUploaderService;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgFileDropDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NgFileDropDirective(elementRef) {\n        this.elementRef = elementRef;\n        this.stopEvent = function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n        };\n        this.uploadOutput = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._sub = [];\n            /** @type {?} */\n            var concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n            /** @type {?} */\n            var allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n            /** @type {?} */\n            var maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n            this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads);\n            this.el = this.elementRef.nativeElement;\n            this._sub.push(this.upload.serviceEvents.subscribe(function (event) {\n                _this.uploadOutput.emit(event);\n            }));\n            if (this.uploadInput instanceof EventEmitter) {\n                this._sub.push(this.upload.initInputEvents(this.uploadInput));\n            }\n            this.el.addEventListener('drop', this.stopEvent, false);\n            this.el.addEventListener('dragenter', this.stopEvent, false);\n            this.el.addEventListener('dragover', this.stopEvent, false);\n        };\n    /**\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            this._sub.forEach(function (sub) { return sub.unsubscribe(); });\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.onDrop = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            e.stopPropagation();\n            e.preventDefault();\n            /** @type {?} */\n            var event = { type: 'drop' };\n            this.uploadOutput.emit(event);\n            this.upload.handleFiles(e.dataTransfer.files);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.onDragOver = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (!e) {\n                return;\n            }\n            /** @type {?} */\n            var event = { type: 'dragOver' };\n            this.uploadOutput.emit(event);\n        };\n    /**\n     * @param {?} e\n     * @return {?}\n     */\n    NgFileDropDirective.prototype.onDragLeave = /**\n     * @param {?} e\n     * @return {?}\n     */\n        function (e) {\n            if (!e) {\n                return;\n            }\n            /** @type {?} */\n            var event = { type: 'dragOut' };\n            this.uploadOutput.emit(event);\n        };\n    return NgFileDropDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgFileSelectDirective = /** @class */ /*@__PURE__*/ (function () {\n    function NgFileSelectDirective(elementRef) {\n        var _this = this;\n        this.elementRef = elementRef;\n        this.fileListener = function () {\n            if (_this.el.files) {\n                _this.upload.handleFiles(_this.el.files);\n            }\n        };\n        this.uploadOutput = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    NgFileSelectDirective.prototype.ngOnInit = /**\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            this._sub = [];\n            /** @type {?} */\n            var concurrency = this.options && this.options.concurrency || Number.POSITIVE_INFINITY;\n            /** @type {?} */\n            var allowedContentTypes = this.options && this.options.allowedContentTypes || ['*'];\n            /** @type {?} */\n            var maxUploads = this.options && this.options.maxUploads || Number.POSITIVE_INFINITY;\n            this.upload = new NgUploaderService(concurrency, allowedContentTypes, maxUploads);\n            this.el = this.elementRef.nativeElement;\n            this.el.addEventListener('change', this.fileListener, false);\n            this._sub.push(this.upload.serviceEvents.subscribe(function (event) {\n                _this.uploadOutput.emit(event);\n            }));\n            if (this.uploadInput instanceof EventEmitter) {\n                this._sub.push(this.upload.initInputEvents(this.uploadInput));\n            }\n        };\n    /**\n     * @return {?}\n     */\n    NgFileSelectDirective.prototype.ngOnDestroy = /**\n     * @return {?}\n     */\n        function () {\n            if (this.el) {\n                this.el.removeEventListener('change', this.fileListener, false);\n                this._sub.forEach(function (sub) { return sub.unsubscribe(); });\n            }\n        };\n    return NgFileSelectDirective;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nvar NgxUploaderModule = /** @class */ /*@__PURE__*/ (function () {\n    function NgxUploaderModule() {\n    }\n    return NgxUploaderModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes,extraRequire,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\n */\nexport { UploadStatus, NgFileDropDirective, NgFileSelectDirective, humanizeBytes, NgUploaderService, NgxUploaderModule };\n//# sourceMappingURL=ngx-uploader.js.map\n",null]}